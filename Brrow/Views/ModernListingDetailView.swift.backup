import SwiftUI
import MapKit

struct ModernListingDetailView: View {
    let listing: Listing
    @StateObject private var viewModel: ListingDetailViewModel
    @State private var selectedImageIndex = 0
    @State private var showingFullScreenImage = false
    @State private var showingMakeOffer = false
    @State private var showingShareSheet = false
    @State private var showingSellerProfile = false
    @State private var showingMessageSeller = false
    @State private var mapRegion = MKCoordinateRegion()
    @State private var animateContent = false
    @Environment(\.dismiss) private var dismiss
    
    init(listing: Listing) {
        self.listing = listing
        self._viewModel = StateObject(wrappedValue: ListingDetailViewModel(listing: listing))
    }
    
    var body: some View {
        ZStack {
            Theme.Colors.background
                .ignoresSafeArea()
            
            ScrollView(showsIndicators: false) {
                VStack(spacing: 0) {
                    // Hero Image Gallery
                    modernImageGallery
                    
                    VStack(spacing: 24) {
                        // Title, Price & Quick Info
                        headerSection
                            .padding(.top, -30)
                        
                        // Enhanced Seller Section
                        enhancedSellerSection
                        
                        // Description with Auto-formatting
                        modernDescriptionSection
                        
                        // Item Location with Map
                        modernLocationSection
                        
                        // Similar Items
                        if !viewModel.similarListings.isEmpty {
                            similarItemsSection
                        }
                        
                        // Report & Safety
                        safetySection
                            .padding(.bottom, 100)
                    }
                    .padding(.horizontal)
                }
            }
            .ignoresSafeArea(edges: .top)
            
            // Modern Bottom Action Bar
            VStack {
                Spacer()
                modernBottomBar
            }
        }
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            ToolbarItem(placement: .navigationBarTrailing) {
                HStack(spacing: 12) {
                    // Favorite Button
                    Button(action: { 
                        withAnimation(.spring(response: 0.3)) {
                            viewModel.toggleFavorite()
                        }
                    }) {
                        Image(systemName: viewModel.isFavorited ? "heart.fill" : "heart")
                            .font(.system(size: 20))
                            .foregroundColor(viewModel.isFavorited ? Theme.Colors.accent : Theme.Colors.text)
                            .scaleEffect(viewModel.isFavorited ? 1.1 : 1.0)
                    }
                    
                    // Share Button
                    Button(action: { showingShareSheet = true }) {
                        Image(systemName: "square.and.arrow.up")
                            .font(.system(size: 20))
                            .foregroundColor(Theme.Colors.text)
                    }
                }
            }
        }
        .sheet(isPresented: $showingSellerProfile) {
            if let seller = viewModel.seller {
                NavigationView {
                    UserProfileView(user: seller)
                        .navigationBarTitleDisplayMode(.inline)
                        .navigationBarItems(trailing: Button("Done") {
                            showingSellerProfile = false
                        })
                }
            }
        }
        .sheet(isPresented: $showingMessageSeller) {
            // MessageSellerView(listing: listing) // TODO: Implement message seller view
        }
        .sheet(isPresented: $showingShareSheet) {
            if let url = URL(string: "https://brrowapp.com/brrow/listing.php?id=\(listing.listingId ?? listing.id)") {
                ShareSheet(activityItems: [
                    listing.title,
                    "Check out this item on Brrow: \(listing.title)",
                    url
                ])
            }
        }
        .fullScreenCover(isPresented: $showingFullScreenImage) {
            ImageGalleryView(images: listing.images, selectedIndex: $selectedImageIndex)
        }
        .onAppear {
            viewModel.loadListingDetails()
            setupMapRegion()
            withAnimation(.easeOut(duration: 0.6)) {
                animateContent = true
            }
        }
    }
    
    // MARK: - Modern Image Gallery
    private var modernImageGallery: some View {
        ZStack(alignment: .bottom) {
            TabView(selection: $selectedImageIndex) {
                ForEach(listing.images.indices, id: \.self) { index in
                    AsyncImage(url: URL(string: listing.images[index])) { phase in
                        switch phase {
                        case .success(let image):
                            image
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                                .frame(height: 450)
                                .clipped()
                        case .failure(_):
                            Image(systemName: "photo")
                                .font(.system(size: 50))
                                .foregroundColor(Theme.Colors.secondary)
                                .frame(height: 450)
                                .frame(maxWidth: .infinity)
                                .background(Theme.Colors.secondaryBackground)
                        case .empty:
                            Rectangle()
                                .fill(Theme.Colors.secondaryBackground)
                                .frame(height: 450)
                                .overlay(
                                    ProgressView()
                                        .tint(Theme.Colors.primary)
                                )
                        @unknown default:
                            EmptyView()
                        }
                    }
                    .tag(index)
                    .onTapGesture {
                        showingFullScreenImage = true
                    }
                }
            }
            .frame(height: 450)
            .tabViewStyle(PageTabViewStyle())
            
            // Modern Image Indicator
            HStack(spacing: 6) {
                ForEach(listing.images.indices, id: \.self) { index in
                    Circle()
                        .fill(index == selectedImageIndex ? Color.white : Color.white.opacity(0.5))
                        .frame(width: index == selectedImageIndex ? 8 : 6, 
                               height: index == selectedImageIndex ? 8 : 6)
                        .animation(.spring(response: 0.3), value: selectedImageIndex)
                }
            }
            .padding(.horizontal, 16)
            .padding(.vertical, 10)
            .background(
                Capsule()
                    .fill(Color.black.opacity(0.3))
                    .background(.ultraThinMaterial)
            )
            .padding(.bottom, 20)
        }
    }
    
    // MARK: - Header Section
    private var headerSection: some View {
        VStack(spacing: 20) {
            // White card background
            VStack(alignment: .leading, spacing: 16) {
                // Title & Category
                VStack(alignment: .leading, spacing: 8) {
                    Text(listing.title)
                        .font(.system(size: 26, weight: .bold))
                        .foregroundColor(Theme.Colors.text)
                    
                    HStack(spacing: 12) {
                        Label(listing.category, systemImage: CategoryHelper.getCategoryIcon(for: listing.category))
                            .font(.system(size: 14, weight: .medium))
                            .foregroundColor(Theme.Colors.secondaryText)
                        
                        if listing.condition != nil {
                            Text("â€¢")
                                .foregroundColor(Theme.Colors.secondary)
                            
                            Text(listing.condition ?? "Good")
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(Theme.Colors.secondaryText)
                        }
                    }
                }
                
                // Price Section
                HStack(alignment: .bottom, spacing: 0) {
                    Text("$")
                        .font(.system(size: 22, weight: .semibold))
                        .foregroundColor(Theme.Colors.primary)
                    
                    Text("\(Int(listing.price))")
                        .font(.system(size: 32, weight: .bold))
                        .foregroundColor(Theme.Colors.primary)
                    
                    Text(listing.type == "for_rent" ? "/day" : "")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(Theme.Colors.secondaryText)
                        .padding(.bottom, 4)
                        .padding(.leading, 4)
                    
                    Spacer()
                    
                    // Stats
                    HStack(spacing: 20) {
                        VStack(spacing: 4) {
                            Image(systemName: "eye")
                                .font(.system(size: 16))
                                .foregroundColor(Theme.Colors.secondary)
                            Text("\(listing.views)")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(Theme.Colors.secondaryText)
                        }
                        
                        VStack(spacing: 4) {
                            Image(systemName: "heart")
                                .font(.system(size: 16))
                                .foregroundColor(Theme.Colors.secondary)
                            Text("0")
                                .font(.system(size: 12, weight: .medium))
                                .foregroundColor(Theme.Colors.secondaryText)
                        }
                    }
                }
            }
            .padding(20)
            .background(
                RoundedRectangle(cornerRadius: 20)
                    .fill(Color.white)
                    .shadow(color: Theme.Colors.primary.opacity(0.08), radius: 10, y: 5)
            )
        }
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6), value: animateContent)
    }
    
    // MARK: - Enhanced Seller Section
    private var enhancedSellerSection: some View {
        Button(action: { showingSellerProfile = true }) {
            HStack(spacing: 16) {
                // Profile Image
                if let profileUrl = viewModel.seller?.profilePicture {
                    AsyncImage(url: URL(string: profileUrl)) { image in
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                            .frame(width: 60, height: 60)
                            .clipShape(Circle())
                    } placeholder: {
                        Circle()
                            .fill(Theme.Colors.primary.opacity(0.1))
                            .frame(width: 60, height: 60)
                            .overlay(
                                Text(viewModel.seller?.username.prefix(1).uppercased() ?? "U")
                                    .font(.system(size: 24, weight: .semibold))
                                    .foregroundColor(Theme.Colors.primary)
                            )
                    }
                } else {
                    Circle()
                        .fill(Theme.Colors.primary.opacity(0.1))
                        .frame(width: 60, height: 60)
                        .overlay(
                            Image(systemName: "person.fill")
                                .font(.system(size: 24))
                                .foregroundColor(Theme.Colors.primary)
                        )
                }
                
                // Seller Info
                VStack(alignment: .leading, spacing: 6) {
                    HStack(spacing: 6) {
                        Text(viewModel.seller?.username ?? listing.ownerUsername ?? "Seller")
                            .font(.system(size: 18, weight: .semibold))
                            .foregroundColor(Theme.Colors.text)
                        
                        if viewModel.seller?.isVerified == true {
                            Image(systemName: "checkmark.seal.fill")
                                .font(.system(size: 14))
                                .foregroundColor(Theme.Colors.primary)
                        }
                    }
                    
                    HStack(spacing: 12) {
                        // Rating
                        HStack(spacing: 4) {
                            Image(systemName: "star.fill")
                                .font(.system(size: 12))
                                .foregroundColor(Theme.Colors.accentOrange)
                            
                            Text(String(format: "%.1f", viewModel.seller?.rating ?? 0))
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(Theme.Colors.text)
                            
                            Text("(0)")
                                .font(.system(size: 12))
                                .foregroundColor(Theme.Colors.secondaryText)
                        }
                        
                        // Member Since
                        if let joinDate = viewModel.seller?.joinDate {
                            Text("â€¢")
                                .foregroundColor(Theme.Colors.secondary)
                            
                            Text("Member since \(formatDate(joinDate))")
                                .font(.system(size: 12))
                                .foregroundColor(Theme.Colors.secondaryText)
                        }
                    }
                }
                
                Spacer()
                
                // Arrow
                Image(systemName: "chevron.right")
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(Theme.Colors.secondary)
            }
            .padding(16)
            .background(
                RoundedRectangle(cornerRadius: 16)
                    .fill(Theme.Colors.secondaryBackground)
            )
        }
        .buttonStyle(PlainButtonStyle())
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6).delay(0.1), value: animateContent)
    }
    
    // MARK: - Modern Description Section
    private var modernDescriptionSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Description")
                .font(.system(size: 20, weight: .semibold))
                .foregroundColor(Theme.Colors.text)
            
            Text(formatDescription(listing.description))
                .font(.system(size: 16))
                .foregroundColor(Theme.Colors.text)
                .lineSpacing(6)
                .fixedSize(horizontal: false, vertical: true)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6).delay(0.2), value: animateContent)
    }
    
    // MARK: - Modern Location Section
    private var modernLocationSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            HStack {
                Image(systemName: "location.circle.fill")
                    .font(.system(size: 20))
                    .foregroundColor(Theme.Colors.primary)
                
                Text("Item Location")
                    .font(.system(size: 20, weight: .semibold))
                    .foregroundColor(Theme.Colors.text)
            }
            
            // Map with circle overlay
            ZStack {
                Map(coordinateRegion: .constant(mapRegion))
                    .disabled(true)
                    .frame(height: 200)
                    .cornerRadius(16)
                    .overlay(
                        // Approximate location circle
                        Circle()
                            .stroke(Theme.Colors.primary.opacity(0.3), lineWidth: 2)
                            .background(
                                Circle()
                                    .fill(Theme.Colors.primary.opacity(0.1))
                            )
                            .frame(width: 150, height: 150)
                    )
                
                // Distance badge
                VStack {
                    HStack {
                        Spacer()
                        HStack(spacing: 4) {
                            Image(systemName: "location.fill")
                                .font(.system(size: 12))
                            Text("\(String(format: "%.1f", calculateDistance())) miles away")
                                .font(.system(size: 14, weight: .medium))
                        }
                        .foregroundColor(.white)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 6)
                        .background(
                            Capsule()
                                .fill(Theme.Colors.primary)
                        )
                        .padding(12)
                    }
                    Spacer()
                }
            }
            
            Text("Exact location will be provided after booking")
                .font(.system(size: 12))
                .foregroundColor(Theme.Colors.secondaryText)
                .italic()
        }
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6).delay(0.3), value: animateContent)
    }
    
    // MARK: - Similar Items Section
    private var similarItemsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Similar Items")
                .font(.system(size: 20, weight: .semibold))
                .foregroundColor(Theme.Colors.text)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 16) {
                    ForEach(viewModel.similarListings) { similarListing in
                        ModernSimilarItemCard(listing: similarListing)
                    }
                }
            }
        }
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6).delay(0.4), value: animateContent)
    }
    
    // MARK: - Safety Section
    private var safetySection: some View {
        VStack(spacing: 12) {
            HStack(spacing: 8) {
                Image(systemName: "shield.fill")
                    .font(.system(size: 16))
                    .foregroundColor(Theme.Colors.primary)
                
                Text("Brrow Protection")
                    .font(.system(size: 14, weight: .semibold))
                    .foregroundColor(Theme.Colors.text)
            }
            
            Text("All transactions are protected by Brrow's secure payment system and insurance coverage.")
                .font(.system(size: 12))
                .foregroundColor(Theme.Colors.secondaryText)
                .multilineTextAlignment(.center)
                .lineSpacing(2)
            
            Button(action: {}) {
                Text("Report this listing")
                    .font(.system(size: 12, weight: .medium))
                    .foregroundColor(Theme.Colors.secondary)
                    .underline()
            }
        }
        .padding(16)
        .frame(maxWidth: .infinity)
        .background(
            RoundedRectangle(cornerRadius: 12)
                .fill(Theme.Colors.secondaryBackground.opacity(0.5))
        )
        .opacity(animateContent ? 1 : 0)
        .offset(y: animateContent ? 0 : 20)
        .animation(.easeOut(duration: 0.6).delay(0.5), value: animateContent)
    }
    
    // MARK: - Modern Bottom Bar
    private var modernBottomBar: some View {
        HStack(spacing: 12) {
            // Message Seller
            Button(action: { showingMessageSeller = true }) {
                Image(systemName: "message.fill")
                    .font(.system(size: 20))
                    .foregroundColor(Theme.Colors.primary)
                    .frame(width: 50, height: 50)
                    .background(
                        Circle()
                            .fill(Theme.Colors.primary.opacity(0.1))
                    )
            }
            
            // Main Action Button
            Button(action: { handleMainAction() }) {
                HStack {
                    Text(listing.type == "for_rent" ? "Rent Now" : "Buy Now")
                        .font(.system(size: 18, weight: .semibold))
                        .foregroundColor(.white)
                    
                    Spacer()
                    
                    VStack(alignment: .trailing, spacing: 2) {
                        Text("$\(Int(listing.price))")
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.white)
                        
                        if listing.type == "for_rent" {
                            Text("per day")
                                .font(.system(size: 10))
                                .foregroundColor(.white.opacity(0.9))
                        }
                    }
                }
                .padding(.horizontal, 20)
                .frame(height: 50)
                .frame(maxWidth: .infinity)
                .background(
                    RoundedRectangle(cornerRadius: 25)
                        .fill(Theme.Colors.primary)
                        .shadow(color: Theme.Colors.primary.opacity(0.3), radius: 8, y: 4)
                )
            }
        }
        .padding(.horizontal, 20)
        .padding(.vertical, 16)
        .background(
            Rectangle()
                .fill(.ultraThinMaterial)
                .background(Color.white.opacity(0.95))
                .ignoresSafeArea()
                .shadow(color: Color.black.opacity(0.05), radius: 10, y: -5)
        )
    }
    
    // MARK: - Helper Functions
    private func setupMapRegion() {
        let latitude = listing.location.latitude
        let longitude = listing.location.longitude
        
        mapRegion = MKCoordinateRegion(
            center: CLLocationCoordinate2D(latitude: latitude, longitude: longitude),
            span: MKCoordinateSpan(latitudeDelta: 0.05, longitudeDelta: 0.05)
        )
    }
    
    private func calculateDistance() -> Double {
        // Calculate distance from user's location to listing
        // For now, return a mock value
        return Double.random(in: 0.5...10.0)
    }
    
    private func formatDate(_ dateString: String) -> String {
        // Format the date string
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"
        if let date = formatter.date(from: dateString) {
            formatter.dateFormat = "MMM yyyy"
            return formatter.string(from: date)
        }
        return "2024"
    }
    
    private func formatDescription(_ description: String) -> String {
        // Auto-format description with proper capitalization and punctuation
        var formatted = description.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // Ensure first letter is capitalized
        if !formatted.isEmpty {
            formatted = formatted.prefix(1).uppercased() + formatted.dropFirst()
        }
        
        // Ensure it ends with proper punctuation
        if !formatted.isEmpty && !formatted.hasSuffix(".") && !formatted.hasSuffix("!") && !formatted.hasSuffix("?") {
            formatted += "."
        }
        
        return formatted
    }
    
    private func handleMainAction() {
        if listing.type == "for_rent" {
            // Handle rental flow
            showingMakeOffer = true
        } else {
            // Handle purchase flow
            showingMakeOffer = true
        }
    }
}

// MARK: - Similar Item Card
struct ModernSimilarItemCard: View {
    let listing: Listing
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            // Image
            if let firstImage = listing.images.first {
                AsyncImage(url: URL(string: firstImage)) { image in
                    image
                        .resizable()
                        .aspectRatio(contentMode: .fill)
                        .frame(width: 140, height: 140)
                        .clipped()
                        .cornerRadius(12)
                } placeholder: {
                    RoundedRectangle(cornerRadius: 12)
                        .fill(Theme.Colors.secondaryBackground)
                        .frame(width: 140, height: 140)
                        .overlay(
                            ProgressView()
                                .tint(Theme.Colors.primary)
                        )
                }
            }
            
            // Title
            Text(listing.title)
                .font(.system(size: 14, weight: .medium))
                .foregroundColor(Theme.Colors.text)
                .lineLimit(1)
                .frame(width: 140, alignment: .leading)
            
            // Price
            Text("$\(Int(listing.price))")
                .font(.system(size: 16, weight: .bold))
                .foregroundColor(Theme.Colors.primary)
        }
    }
}