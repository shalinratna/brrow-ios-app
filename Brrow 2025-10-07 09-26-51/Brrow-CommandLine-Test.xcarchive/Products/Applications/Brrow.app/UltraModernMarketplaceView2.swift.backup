import SwiftUI
import Combine

struct UltraModernMarketplaceView2: View {
    @StateObject private var viewModel = MarketplaceViewModel()
    @StateObject private var searchViewModel = SearchViewModel()
    
    @State private var selectedCategory: String = "All"
    @State private var searchText = ""
    @State private var showingFilters = false
    @State private var scrollOffset: CGFloat = 0
    @State private var headerOffset: CGFloat = 0
    @State private var showingSearch = false
    @State private var pulseAnimation = false
    @State private var rotationAngle: Double = 0
    @State private var glowIntensity: Double = 0.3
    @State private var wavePhase: Double = 0
    @State private var particleSystem = ParticleSystem()
    @State private var selectedListingId: Int?
    @State private var showingListingDetail = false
    
    @Namespace private var animation
    @Namespace private var searchAnimation
    
    private let categories = ["All", "Tools", "Electronics", "Furniture", "Sports", "Garden", "Party", "Other"]
    private let gradientColors = [
        Color(red: 0.1, green: 0.7, blue: 0.9),
        Color(red: 0.2, green: 0.5, blue: 0.8),
        Color(red: 0.1, green: 0.3, blue: 0.7)
    ]
    
    var body: some View {
        ZStack {
            AnimatedBackgroundView()
            
            ScrollViewReader { proxy in
                ScrollView(.vertical, showsIndicators: false) {
                    VStack(spacing: 0) {
                        parallaxHeader
                            .id("top")
                        
                        VStack(spacing: 20) {
                            if showingSearch {
                                searchBarSection
                                    .transition(.asymmetric(
                                        insertion: .move(edge: .top).combined(with: .opacity),
                                        removal: .move(edge: .top).combined(with: .opacity)
                                    ))
                            }
                            
                            categoryScrollView
                            
                            if !searchText.isEmpty && !searchViewModel.suggestions.isEmpty {
                                searchSuggestionsView
                            }
                            
                            featuredSection
                            
                            mainListingsGrid
                        }
                        .padding(.top, 20)
                        .background(GeometryReader { geo in
                            Color.clear
                                .preference(key: MarketplaceScrollOffsetPreferenceKey.self,
                                           value: geo.frame(in: .named("scroll")).minY)
                        })
                    }
                }
                .coordinateSpace(name: "scroll")
                .onPreferenceChange(MarketplaceScrollOffsetPreferenceKey.self) { value in
                    withAnimation(.spring(response: 0.3)) {
                        scrollOffset = value
                        headerOffset = min(0, value + 100)
                    }
                }
            }
            
            floatingActionButton
            
            if particleSystem.isActive {
                ParticleView(system: $particleSystem)
                    .allowsHitTesting(false)
            }
        }
        .sheet(isPresented: $showingListingDetail) {
            if let listingId = selectedListingId,
               let listing = viewModel.listings.first(where: { $0.id == listingId }) {
                ListingDetailView(listing: listing)
            }
        }
        .onAppear {
            startAnimations()
            viewModel.fetchListings()
        }
    }
    
    private var parallaxHeader: some View {
        ZStack {
            GeometryReader { geometry in
                ZStack {
                    LinearGradient(
                        gradient: Gradient(colors: gradientColors),
                        startPoint: .topLeading,
                        endPoint: .bottomTrailing
                    )
                    .overlay(
                        WaveShape(phase: wavePhase)
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [
                                        Color.white.opacity(0.3),
                                        Color.white.opacity(0.1)
                                    ]),
                                    startPoint: .top,
                                    endPoint: .bottom
                                )
                            )
                            .blur(radius: 1)
                    )
                    
                    VStack(spacing: 16) {
                        Text("Discover Amazing Items")
                            .font(.system(size: 34, weight: .bold, design: .rounded))
                            .foregroundColor(.white)
                            .shadow(color: .black.opacity(0.3), radius: 4, x: 0, y: 2)
                            .scaleEffect(1 + scrollOffset * 0.001)
                            .opacity(1 + scrollOffset * 0.005)
                        
                        Text("Find what you need in your neighborhood")
                            .font(.system(size: 18, weight: .medium, design: .rounded))
                            .foregroundColor(.white.opacity(0.9))
                            .shadow(color: .black.opacity(0.2), radius: 2, x: 0, y: 1)
                            .scaleEffect(1 + scrollOffset * 0.0015)
                    }
                    .padding(.horizontal)
                    .offset(y: scrollOffset * 0.5)
                }
                .frame(width: geometry.size.width, height: geometry.size.height)
                .offset(y: scrollOffset > 0 ? 0 : scrollOffset * 0.8)
                .scaleEffect(1 + (scrollOffset > 0 ? scrollOffset * 0.001 : 0))
            }
            .frame(height: 200)
        }
        .frame(height: 200)
        .overlay(
            HStack {
                Button(action: { 
                    withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                        showingSearch.toggle()
                    }
                    HapticManager.impact(style: .light)
                }) {
                    Image(systemName: "magnifyingglass")
                        .font(.system(size: 20, weight: .semibold))
                        .foregroundColor(.white)
                        .frame(width: 44, height: 44)
                        .background(
                            Circle()
                                .fill(Color.white.opacity(0.2))
                                .overlay(
                                    Circle()
                                        .stroke(Color.white.opacity(0.3), lineWidth: 1)
                                )
                        )
                        .shadow(color: .black.opacity(0.2), radius: 4, x: 0, y: 2)
                        .scaleEffect(showingSearch ? 1.1 : 1.0)
                }
                
                Spacer()
                
                Button(action: { 
                    showingFilters.toggle()
                    HapticManager.impact(style: .light)
                }) {
                    Image(systemName: "slider.horizontal.3")
                        .font(.system(size: 20, weight: .semibold))
                        .foregroundColor(.white)
                        .frame(width: 44, height: 44)
                        .background(
                            Circle()
                                .fill(Color.white.opacity(0.2))
                                .overlay(
                                    Circle()
                                        .stroke(Color.white.opacity(0.3), lineWidth: 1)
                                )
                        )
                        .shadow(color: .black.opacity(0.2), radius: 4, x: 0, y: 2)
                }
            }
            .padding(.horizontal)
            .padding(.bottom, 10)
            .opacity(1 + headerOffset * 0.01)
            ,
            alignment: .bottom
        )
    }
    
    private var searchBarSection: some View {
        HStack {
            HStack {
                Image(systemName: "magnifyingglass")
                    .foregroundColor(.gray)
                    .font(.system(size: 18))
                
                TextField("Search for items...", text: $searchText)
                    .textFieldStyle(PlainTextFieldStyle())
                    .onChange(of: searchText) { newValue in
                        searchViewModel.searchSuggestions(query: newValue)
                    }
                
                if !searchText.isEmpty {
                    Button(action: {
                        searchText = ""
                        searchViewModel.suggestions = []
                    }) {
                        Image(systemName: "xmark.circle.fill")
                            .foregroundColor(.gray)
                            .font(.system(size: 18))
                    }
                }
            }
            .padding(12)
            .background(
                RoundedRectangle(cornerRadius: 15)
                    .fill(Color(.systemBackground))
                    .shadow(color: .black.opacity(0.1), radius: 10, x: 0, y: 5)
            )
            .overlay(
                RoundedRectangle(cornerRadius: 15)
                    .stroke(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color.blue.opacity(0.3),
                                Color.purple.opacity(0.3)
                            ]),
                            startPoint: .leading,
                            endPoint: .trailing
                        ),
                        lineWidth: 1
                    )
            )
        }
        .padding(.horizontal)
        .matchedGeometryEffect(id: "searchBar", in: searchAnimation)
    }
    
    private var categoryScrollView: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack(spacing: 12) {
                ForEach(categories, id: \.self) { category in
                    CategoryPill2(
                        title: category,
                        isSelected: selectedCategory == category,
                        action: {
                            withAnimation(.spring(response: 0.3, dampingFraction: 0.7)) {
                                selectedCategory = category
                                viewModel.filterByCategory(category)
                                HapticManager.impact(style: .light)
                                particleSystem.emit(at: CGPoint(x: UIScreen.main.bounds.width / 2, y: 200))
                            }
                        }
                    )
                }
            }
            .padding(.horizontal)
        }
    }
    
    private var searchSuggestionsView: some View {
        VStack(alignment: .leading, spacing: 8) {
            ForEach(searchViewModel.suggestions, id: \.id) { suggestion in
                Button(action: {
                    searchText = suggestion.title
                    searchViewModel.suggestions = []
                    viewModel.searchListings(query: suggestion.title)
                    HapticManager.impact(style: .light)
                }) {
                    HStack {
                        if let imageUrl = suggestion.imageUrl {
                            AsyncImage(url: URL(string: imageUrl)) { image in
                                image
                                    .resizable()
                                    .aspectRatio(contentMode: .fill)
                            } placeholder: {
                                RoundedRectangle(cornerRadius: 8)
                                    .fill(Color.gray.opacity(0.2))
                            }
                            .frame(width: 40, height: 40)
                            .clipShape(RoundedRectangle(cornerRadius: 8))
                        }
                        
                        VStack(alignment: .leading, spacing: 2) {
                            Text(suggestion.title)
                                .font(.system(size: 16, weight: .medium))
                                .foregroundColor(.primary)
                            
                            if let category = suggestion.category {
                                Text(category)
                                    .font(.system(size: 12))
                                    .foregroundColor(.secondary)
                            }
                        }
                        
                        Spacer()
                        
                        Image(systemName: "arrow.up.left")
                            .font(.system(size: 14))
                            .foregroundColor(.gray)
                    }
                    .padding(.horizontal, 16)
                    .padding(.vertical, 8)
                    .background(
                        RoundedRectangle(cornerRadius: 12)
                            .fill(Color(.systemBackground))
                            .shadow(color: .black.opacity(0.05), radius: 5, x: 0, y: 2)
                    )
                }
                .buttonStyle(PlainButtonStyle())
            }
        }
        .padding(.horizontal)
    }
    
    private var featuredSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Featured Items")
                    .font(.system(size: 24, weight: .bold, design: .rounded))
                
                Spacer()
                
                Image(systemName: "sparkles")
                    .font(.system(size: 20))
                    .foregroundColor(.yellow)
                    .rotationEffect(.degrees(rotationAngle))
                    .shadow(color: .yellow.opacity(glowIntensity), radius: 5)
            }
            .padding(.horizontal)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 16) {
                    ForEach(viewModel.featuredListings.prefix(5)) { listing in
                        FeaturedCard2(listing: listing) {
                            selectedListingId = listing.id
                            showingListingDetail = true
                            HapticManager.impact(style: .medium)
                        }
                    }
                }
                .padding(.horizontal)
            }
        }
    }
    
    private var mainListingsGrid: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("All Items")
                .font(.system(size: 24, weight: .bold, design: .rounded))
                .padding(.horizontal)
            
            if viewModel.isLoading && viewModel.listings.isEmpty {
                ShimmerGridView()
            } else if viewModel.listings.isEmpty {
                EmptyStateView2()
                    .padding(.top, 50)
            } else {
                LazyVGrid(columns: [
                    GridItem(.flexible(), spacing: 16),
                    GridItem(.flexible(), spacing: 16)
                ], spacing: 16) {
                    ForEach(viewModel.listings) { listing in
                        ModernListingCard2(listing: listing) {
                            selectedListingId = listing.id
                            showingListingDetail = true
                            HapticManager.impact(style: .medium)
                        }
                        .onAppear {
                            if listing == viewModel.listings.last {
                                viewModel.loadMoreListings()
                            }
                        }
                    }
                }
                .padding(.horizontal)
                
                if viewModel.isLoadingMore {
                    ProgressView()
                        .frame(maxWidth: .infinity)
                        .padding()
                }
            }
        }
        .padding(.bottom, 100)
    }
    
    private var floatingActionButton: some View {
        VStack {
            Spacer()
            HStack {
                Spacer()
                Button(action: {
                    HapticManager.impact(style: .heavy)
                    particleSystem.emit(at: CGPoint(x: UIScreen.main.bounds.width - 50, y: UIScreen.main.bounds.height - 150))
                }) {
                    ZStack {
                        Circle()
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.blue, Color.purple]),
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                            .frame(width: 60, height: 60)
                            .shadow(color: .purple.opacity(0.5), radius: 10, x: 0, y: 5)
                            .overlay(
                                Circle()
                                    .stroke(Color.white.opacity(0.3), lineWidth: 1)
                            )
                        
                        Image(systemName: "plus")
                            .font(.system(size: 24, weight: .bold))
                            .foregroundColor(.white)
                            .rotationEffect(.degrees(pulseAnimation ? 180 : 0))
                    }
                    .scaleEffect(pulseAnimation ? 1.1 : 1.0)
                }
                .padding(.trailing, 20)
                .padding(.bottom, 30)
            }
        }
    }
    
    private func startAnimations() {
        withAnimation(Animation.linear(duration: 3).repeatForever(autoreverses: false)) {
            wavePhase = .pi * 2
        }
        
        withAnimation(Animation.linear(duration: 10).repeatForever(autoreverses: false)) {
            rotationAngle = 360
        }
        
        withAnimation(Animation.easeInOut(duration: 2).repeatForever(autoreverses: true)) {
            glowIntensity = 0.8
        }
        
        withAnimation(Animation.easeInOut(duration: 1.5).repeatForever(autoreverses: true)) {
            pulseAnimation = true
        }
    }
}

struct CategoryPill2: View {
    let title: String
    let isSelected: Bool
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            Text(title)
                .font(.system(size: 16, weight: .semibold))
                .foregroundColor(isSelected ? .white : .primary)
                .padding(.horizontal, 20)
                .padding(.vertical, 10)
                .background(
                    Group {
                        if isSelected {
                            LinearGradient(
                                gradient: Gradient(colors: [Color.blue, Color.purple]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        } else {
                            Color(.systemGray6)
                        }
                    }
                )
                .clipShape(Capsule())
                .shadow(color: isSelected ? .purple.opacity(0.3) : .clear, radius: 5, x: 0, y: 3)
                .scaleEffect(isSelected ? 1.05 : 1.0)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

struct FeaturedCard2: View {
    let listing: Listing
    let action: () -> Void
    @State private var isHovered = false
    
    var body: some View {
        Button(action: action) {
            ZStack {
                if let firstImage = listing.images.first {
                    AsyncImage(url: URL(string: firstImage)) { image in
                        image
                            .resizable()
                            .aspectRatio(contentMode: .fill)
                    } placeholder: {
                        ShimmerView2()
                    }
                    .frame(width: 280, height: 180)
                    .clipped()
                }
                
                VStack {
                    Spacer()
                    
                    VStack(alignment: .leading, spacing: 8) {
                        Text(listing.title)
                            .font(.system(size: 18, weight: .bold))
                            .foregroundColor(.white)
                            .lineLimit(1)
                        
                        HStack {
                            Text("$\(listing.price, specifier: "%.2f")")
                                .font(.system(size: 22, weight: .heavy))
                                .foregroundColor(.white)
                            
                            Text(listing.priceType == "day" ? "/day" : "")
                                .font(.system(size: 14, weight: .medium))
                                .foregroundColor(.white.opacity(0.8))
                            
                            Spacer()
                            
                            if listing.isPromoted {
                                Label("Featured", systemImage: "star.fill")
                                    .font(.system(size: 12, weight: .semibold))
                                    .foregroundColor(.yellow)
                                    .padding(.horizontal, 8)
                                    .padding(.vertical, 4)
                                    .background(
                                        Capsule()
                                            .fill(Color.black.opacity(0.5))
                                    )
                            }
                        }
                    }
                    .padding()
                    .background(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color.black.opacity(0.8),
                                Color.black.opacity(0.4),
                                Color.clear
                            ]),
                            startPoint: .bottom,
                            endPoint: .top
                        )
                    )
                }
            }
            .frame(width: 280, height: 180)
            .clipShape(RoundedRectangle(cornerRadius: 20))
            .shadow(color: .black.opacity(0.2), radius: 10, x: 0, y: 5)
            .scaleEffect(isHovered ? 1.05 : 1.0)
            .animation(.spring(response: 0.3), value: isHovered)
        }
        .buttonStyle(PlainButtonStyle())
        .onHover { hovering in
            isHovered = hovering
        }
    }
}

struct ModernListingCard2: View {
    let listing: Listing
    let action: () -> Void
    @State private var isPressed = false
    @State private var shimmerPhase: CGFloat = -1
    
    var body: some View {
        Button(action: action) {
            VStack(alignment: .leading, spacing: 0) {
                ZStack(alignment: .topTrailing) {
                    if let firstImage = listing.images.first {
                        AsyncImage(url: URL(string: firstImage)) { image in
                            image
                                .resizable()
                                .aspectRatio(contentMode: .fill)
                        } placeholder: {
                            ShimmerView2()
                        }
                        .frame(height: 160)
                        .clipped()
                    } else {
                        RoundedRectangle(cornerRadius: 0)
                            .fill(
                                LinearGradient(
                                    gradient: Gradient(colors: [Color.gray.opacity(0.2), Color.gray.opacity(0.3)]),
                                    startPoint: .topLeading,
                                    endPoint: .bottomTrailing
                                )
                            )
                            .frame(height: 160)
                    }
                    
                    if listing.isPromoted {
                        Image(systemName: "star.circle.fill")
                            .font(.system(size: 24))
                            .foregroundColor(.yellow)
                            .background(Circle().fill(Color.black.opacity(0.5)))
                            .padding(8)
                    }
                }
                
                VStack(alignment: .leading, spacing: 8) {
                    Text(listing.title)
                        .font(.system(size: 16, weight: .semibold))
                        .foregroundColor(.primary)
                        .lineLimit(2)
                        .multilineTextAlignment(.leading)
                    
                    HStack {
                        Text("$\(listing.price, specifier: "%.2f")")
                            .font(.system(size: 20, weight: .bold))
                            .foregroundColor(.primary)
                        
                        if listing.priceType == "day" {
                            Text("/day")
                                .font(.system(size: 14))
                                .foregroundColor(.secondary)
                        }
                    }
                    
                    HStack {
                        Image(systemName: "mappin.circle.fill")
                            .font(.system(size: 12))
                            .foregroundColor(.gray)
                        
                        Text(listing.location ?? "Unknown")
                            .font(.system(size: 12))
                            .foregroundColor(.gray)
                            .lineLimit(1)
                    }
                }
                .padding()
            }
            .background(Color(.systemBackground))
            .clipShape(RoundedRectangle(cornerRadius: 16))
            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)
            .overlay(
                RoundedRectangle(cornerRadius: 16)
                    .stroke(
                        LinearGradient(
                            gradient: Gradient(colors: [
                                Color.blue.opacity(0.2),
                                Color.purple.opacity(0.2)
                            ]),
                            startPoint: .topLeading,
                            endPoint: .bottomTrailing
                        ),
                        lineWidth: listing.isPromoted ? 2 : 0
                    )
            )
            .scaleEffect(isPressed ? 0.95 : 1.0)
            .animation(.spring(response: 0.3), value: isPressed)
        }
        .buttonStyle(PlainButtonStyle())
        .onLongPressGesture(minimumDuration: 0.1, maximumDistance: .infinity, pressing: { pressing in
            isPressed = pressing
        }, perform: {})
    }
}

struct WaveShape: Shape {
    var phase: Double
    
    var animatableData: Double {
        get { phase }
        set { phase = newValue }
    }
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        let width = rect.width
        let height = rect.height
        let midHeight = height * 0.5
        let wavelength = width * 0.5
        
        path.move(to: CGPoint(x: 0, y: midHeight))
        
        for x in stride(from: 0, through: width, by: 1) {
            let relativeX = x / wavelength
            let sine = sin((relativeX + CGFloat(phase)) * .pi)
            let y = midHeight + sine * midHeight * 0.2
            path.addLine(to: CGPoint(x: x, y: y))
        }
        
        path.addLine(to: CGPoint(x: width, y: height))
        path.addLine(to: CGPoint(x: 0, y: height))
        path.closeSubpath()
        
        return path
    }
}

struct AnimatedBackgroundView: View {
    @State private var gradientAngle: Double = 0
    
    var body: some View {
        LinearGradient(
            gradient: Gradient(colors: [
                Color(red: 0.95, green: 0.95, blue: 0.98),
                Color(red: 0.92, green: 0.94, blue: 0.97),
                Color(red: 0.90, green: 0.92, blue: 0.96)
            ]),
            startPoint: .topLeading,
            endPoint: .bottomTrailing
        )
        .hueRotation(.degrees(gradientAngle))
        .ignoresSafeArea()
        .onAppear {
            withAnimation(.linear(duration: 10).repeatForever(autoreverses: false)) {
                gradientAngle = 360
            }
        }
    }
}

struct ShimmerView2: View {
    @State private var shimmerOffset: CGFloat = -1
    
    var body: some View {
        GeometryReader { geometry in
            Rectangle()
                .fill(Color.gray.opacity(0.3))
                .overlay(
                    Rectangle()
                        .fill(
                            LinearGradient(
                                gradient: Gradient(colors: [
                                    Color.white.opacity(0.0),
                                    Color.white.opacity(0.3),
                                    Color.white.opacity(0.0)
                                ]),
                                startPoint: .leading,
                                endPoint: .trailing
                            )
                        )
                        .rotationEffect(.degrees(20))
                        .offset(x: shimmerOffset * geometry.size.width)
                )
                .onAppear {
                    withAnimation(.linear(duration: 1.5).repeatForever(autoreverses: false)) {
                        shimmerOffset = 2
                    }
                }
        }
    }
}

struct ShimmerGridView: View {
    var body: some View {
        LazyVGrid(columns: [
            GridItem(.flexible(), spacing: 16),
            GridItem(.flexible(), spacing: 16)
        ], spacing: 16) {
            ForEach(0..<6) { _ in
                VStack(alignment: .leading, spacing: 0) {
                    ShimmerView()
                        .frame(height: 160)
                        .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                    
                    VStack(alignment: .leading, spacing: 8) {
                        ShimmerView2()
                            .frame(height: 20)
                            .clipShape(RoundedRectangle(cornerRadius: 4))
                        
                        ShimmerView2()
                            .frame(width: 80, height: 16)
                            .clipShape(RoundedRectangle(cornerRadius: 4))
                    }
                    .padding()
                }
                .background(Color(.systemBackground))
                .clipShape(RoundedRectangle(cornerRadius: 16))
                .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)
            }
        }
        .padding(.horizontal)
    }
}

struct EmptyStateView2: View {
    @State private var bounceAnimation = false
    
    var body: some View {
        VStack(spacing: 20) {
            Image(systemName: "bag.badge.questionmark")
                .font(.system(size: 60))
                .foregroundColor(.gray.opacity(0.5))
                .scaleEffect(bounceAnimation ? 1.1 : 1.0)
                .animation(.spring(response: 0.5, dampingFraction: 0.5).repeatForever(autoreverses: true), value: bounceAnimation)
            
            Text("No items found")
                .font(.system(size: 22, weight: .semibold))
                .foregroundColor(.primary)
            
            Text("Try adjusting your filters or search")
                .font(.system(size: 16))
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
        }
        .frame(maxWidth: .infinity)
        .onAppear {
            bounceAnimation = true
        }
    }
}

struct ParticleSystem {
    var particles: [MarketplaceParticle] = []
    var isActive: Bool = false
    
    mutating func emit(at position: CGPoint) {
        isActive = true
        for _ in 0..<20 {
            let particle = MarketplaceParticle(
                position: position,
                velocity: CGVector(
                    dx: Double.random(in: -100...100),
                    dy: Double.random(in: -200...-50)
                ),
                color: [Color.blue, Color.purple, Color.pink].randomElement()!,
                size: CGFloat.random(in: 4...8)
            )
            particles.append(particle)
        }
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
            self.particles.removeAll()
            self.isActive = false
        }
    }
}

struct MarketplaceParticle: Identifiable {
    let id = UUID()
    var position: CGPoint
    var velocity: CGVector
    var color: Color
    var size: CGFloat
    var opacity: Double = 1.0
}

struct ParticleView: View {
    @Binding var system: ParticleSystem
    @State private var time: Double = 0
    
    var body: some View {
        Canvas { context, size in
            for particle in system.particles {
                let x = particle.position.x + particle.velocity.dx * time
                let y = particle.position.y + particle.velocity.dy * time + 0.5 * 200 * time * time
                let opacity = max(0, 1 - time)
                
                context.opacity = opacity
                context.fill(
                    Circle().path(in: CGRect(
                        x: x - particle.size / 2,
                        y: y - particle.size / 2,
                        width: particle.size,
                        height: particle.size
                    )),
                    with: .color(particle.color)
                )
            }
        }
        .onAppear {
            withAnimation(.linear(duration: 2)) {
                time = 2
            }
        }
    }
}

struct MarketplaceScrollOffsetPreferenceKey: PreferenceKey {
    static var defaultValue: CGFloat = 0
    static func reduce(value: inout CGFloat, nextValue: () -> CGFloat) {
        value = nextValue()
    }
}

struct UltraModernMarketplaceView2_Previews: PreviewProvider {
    static var previews: some View {
        UltraModernMarketplaceView2()
    }
}